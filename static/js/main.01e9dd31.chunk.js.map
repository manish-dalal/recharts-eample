{"version":3,"sources":["App2.js","serviceWorker.js","index.js"],"names":["BarCharts","lazy","Promise","all","__webpack_require__","e","then","bind","AreaChart","BarCharts1","ApplicationContext","createContext","name","age","Provider","Consumer","App2","props","_this","Object","_home_com_66_Downloads_New_Study_recharts_example_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_com_66_Downloads_New_Study_recharts_example_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_com_66_Downloads_New_Study_recharts_example_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","updateAge","setState","state","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","value","_home_com_66_Downloads_New_Study_recharts_example_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","console","log","showImage","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","exact","path","render","react__WEBPACK_IMPORTED_MODULE_6__","fallback","Component","Boolean","window","location","hostname","match","$","jQuery","require","ReactDOM","react_default","BrowserRouter","Route","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0MAOMA,EAAYC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACvBC,EAAYP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACvBE,EAAaR,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAOxBG,EAAqBC,wBALN,CACnBC,KAAM,GACNC,IAAK,IAKCC,EAAuBJ,EAAvBI,SAAUC,EAAaL,EAAbK,SAEZC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,UAAY,SAAAZ,GACVK,EAAKQ,SAAS,CAAEb,SAbhBK,EAAKS,MAAQ,CACXf,KAAM,MACNC,IAAK,KAJUK,wEAmBjB,OACEU,EAAAC,EAAAC,cAAChB,EAAD,CAAUiB,MAAKZ,OAAAa,EAAA,EAAAb,CAAA,GAAOE,KAAKM,MAAZ,CAAmBF,UAAWJ,KAAKI,aAChDG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,sBAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,cAAT,sBAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,cAAT,eAGHC,QAAQC,IAAI,aAAcf,KAAKM,MAAMU,WACtCT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAAxB,GAAK,OACXW,EAAAC,EAAAC,cAACY,EAAA,SAAD,CAAUC,SAAUf,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAAC9B,EAAciB,EAAQ,iBAK7BW,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEE,KAAK,aACLC,OAAQ,SAAAxB,GAAK,OACXW,EAAAC,EAAAC,cAACY,EAAA,SAAD,CAAUC,SAAUf,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACtB,EAAcS,OAKrBW,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEE,KAAK,aACLC,OAAQ,SAAAxB,GAAK,OACXW,EAAAC,EAAAC,cAACY,EAAA,SAAD,CAAUC,SAAUf,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACrB,EAAeQ,gBA3Db2B,aAsEJ5B,2KC9EK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNH,OAAOI,EAAIJ,OAAOK,OAASC,EAAQ,IAEnCC,IAASZ,OACPa,EAAAzB,EAAAC,cAACyB,EAAA,EAAD,KACED,EAAAzB,EAAAC,cAAC0B,EAAA,EAAD,CAAOhB,KAAK,IAAIC,OAAQ,SAAAxB,GAAK,OAAIqC,EAAAzB,EAAAC,cAACd,EAAA,EAASC,OAE7CwC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.01e9dd31.chunk.js","sourcesContent":["import React, { Component, Suspense, lazy, createContext } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\n// import App from './App';\n// import BarCharts from \"./BarCharts\";\n// import AreaChart from \"./AreaChart\";\n// import BarCharts1 from \"./BarCharts1\";\nconst BarCharts = lazy(() => import(\"./BarCharts\"));\nconst AreaChart = lazy(() => import(\"./AreaChart\"));\nconst BarCharts1 = lazy(() => import(\"./BarCharts1\"));\n\nconst initialState = {\n  name: \"\",\n  age: 0\n};\n\nconst ApplicationContext = createContext(initialState);\n\nconst { Provider, Consumer } = ApplicationContext;\n\nclass App2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Wes\",\n      age: 100\n    };\n  }\n\n  // componentDidMount() {\n  //   const showImage = \"\";\n  //   this.props.match.path === \"/\" &&\n  //     import(\"./BarCharts\").then(da => this.setState({ showImage: da }));\n  // }\n\n  updateAge = age => {\n    this.setState({ age });\n  };\n\n  render() {\n    return (\n      <Provider value={{ ...this.state, updateAge: this.updateAge }}>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">BarCharts stacked</Link>\n            </li>\n            <li>\n              <Link to=\"/AreaChart\">AreaChart stacked</Link>\n            </li>\n            <li>\n              <Link to=\"/BarCharts\">BarCharts</Link>\n            </li>\n          </ul>\n          {console.log(\"ssssssssss\", this.state.showImage)}\n          <hr />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <Suspense fallback={<div>Loading...</div>}>\n                <BarCharts {...props}>{\"aaaaaaaaa\"}</BarCharts>\n              </Suspense>\n            )}\n            // component={BarCharts}\n          />\n          <Route\n            path=\"/AreaChart\"\n            render={props => (\n              <Suspense fallback={<div>Loading...</div>}>\n                <AreaChart {...props} />\n              </Suspense>\n            )}\n            // component={AreaChart}\n          />\n          <Route\n            path=\"/BarCharts\"\n            render={props => (\n              <Suspense fallback={<div>Loading...</div>}>\n                <BarCharts1 {...props} />\n              </Suspense>\n            )}\n            // component={BarCharts1}\n          />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App2;\nexport { Provider, Consumer };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App2 from \"./App2\";\n// import App from \"./AppContext\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n// import App from './App';\nwindow.$ = window.jQuery = require(\"jquery\");\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/\" render={props => <App2 {...props} />} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}